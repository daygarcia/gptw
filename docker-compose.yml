networks:
  nodejs:
    driver: bridge

services:
  postgres:
    image: postgres:13.5
    container_name: postgres
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    networks:
      - nodejs
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - nodejs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5

  auth:
    container_name: auth
    build:
      context: ./auth
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - "rabbitmq"
    environment:
      DATABASE_URL: postgres://postgres:root@postgres:5432/postgres
    ports:
      - "3000:3000"
    command: npm run start:dev
    volumes:
      - ./auth:/app
    networks:
      - nodejs

  file-service:
    container_name: file-service
    build:
      context: ./file-service
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - auth
      - "rabbitmq"
    ports:
      - "3001:3001"
    command: npm run start:dev
    volumes:
      - ./file-service:/app
    networks:
      - nodejs

  mock:
    container_name: mock
    build:
      context: ./mock
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - "rabbitmq"
      - auth
    environment:
      DATABASE_URL: postgres://postgres:root@postgres:5432/postgres
    ports:
      - "3002:3002"
    command: npm run start:dev:migrate
    volumes:
      - ./mock:/app
    networks:
      - nodejs
